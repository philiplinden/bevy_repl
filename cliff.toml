# git-cliff ~ configuration file
# https://git-cliff.org/docs/configuration

[remote.github]
owner = "philiplinden"
repo = "bevy_repl"

[workspace]
manifest_path = "Cargo.toml"

[changelog]
header = """
# Changelog\n

See [GitHub Releases](https://github.com/philiplinden/bevy_repl/releases) and
the [Bevy REPL Book](https://philiplinden.github.io/bevy_repl) for details.

"""
body = """
{%- macro remote_url() -%}
  https://github.com/{{ remote.github.owner }}/{{ remote.github.repo }}
{%- endmacro -%}

{% macro print_commit(commit) -%}
    - {% if commit.scope %}*({{ commit.scope }})* {% endif %}\
        {% if commit.breaking %}[**breaking**] {% endif %}\
        {{ commit.message | upper_first }} \
        ([`{{ commit.id | truncate(length=7, end="") }}`]({{ self::remote_url() }}/commit/{{ commit.id }}))\
{% endmacro -%}

{% if version %}\
    {% if previous.version %}\
        ## [{{ version | trim_start_matches(pat="v") }}]\
          ({{ self::remote_url() }}/compare/{{ previous.version }}..{{ version }}) - {{ timestamp | date(format="%Y-%m-%d") }}
    {% else %}\
        ## [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
    {% endif %}\
{% else %}\
    ## [unreleased]
{% endif %}\

{% for group, commits in commits | unique(attribute="message") | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits
    | filter(attribute="scope")
    | sort(attribute="scope") %}
        {{ self::print_commit(commit=commit) }}
    {%- endfor %}
    {% for commit in commits %}
        {%- if not commit.scope -%}
            {{ self::print_commit(commit=commit) }}
        {% endif -%}
    {% endfor -%}
{% endfor -%}
{%- if github -%}
{% if github.contributors | filter(attribute="is_first_time", value=true) | length != 0 %}

### New Contributors ‚ù§Ô∏è
{% endif %}\
{% for contributor in github.contributors | filter(attribute="is_first_time", value=true) %}
  * @{{ contributor.username }} made their first contribution
    {%- if contributor.pr_number %} in \
      [#{{ contributor.pr_number }}]({{ self::remote_url() }}/pull/{{ contributor.pr_number }}) \
    {%- endif %}
{%- endfor -%}
{%- endif %}

"""

footer = """
<!-- generated by git-cliff -->
"""
# Remove leading and trailing whitespaces from the changelog's body.
trim = true
# Render body even when there are no releases to process.
render_always = false
# An array of regex based postprocessors to modify the changelog.
postprocessors = [
    # Replace the placeholder <REPO> with a URL.
    { pattern = '<REPO>', replace = "https://github.com/philiplinden/bevy_repl" },
]
# render body even when there are no releases to process
# render_always = true
# output file path
output = "CHANGELOG.md"

[git]
# Parse commits according to the conventional commits specification.
# See https://www.conventionalcommits.org
conventional_commits = true
# Exclude commits that do not match the conventional commits specification.
filter_unconventional = true
# Split commits on newlines, treating each line as an individual commit.
split_commits = false
# An array of regex based parsers to modify commit messages prior to further processing.
commit_preprocessors = [
    # Replace issue numbers with link templates to be updated in `changelog.postprocessors`.
    #{ pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](<REPO>/issues/${2}))"},
    # Check spelling of the commit message using https://github.com/crate-ci/typos.
    # If the spelling is incorrect, it will be fixed automatically.
    #{ pattern = '.*', replace_command = 'typos --write-changes -' },
]
# Prevent commits that are breaking from being excluded by commit parsers.
protect_breaking_commits = false
# An array of regex based parsers for extracting data from the commit message.
# Assigns commits to groups.
# Optionally sets the commit's scope and can decide to exclude commits from further processing.
commit_parsers = [
    { message = "^feat:", group = "<!-- 1 -->üöÄ Features" },
    { message = "^doc:", group = "<!-- 2 -->üìö Documentation" },
    { message = "^perf:", group = "<!-- 3 -->‚ö° Performance" },
    { message = "^refactor:|^cleanup:", group = "<!-- 4 -->‚ôªÔ∏è Refactor" },
    { message = "^style:|^ui:", group = "<!-- 5 -->üé® UI & Styling" },
    { message = "^fix:", group = "<!-- 6 -->üêõ Bug Fixes" },
    { message = "^dev:", group = "<!-- 7 -->üß™ Experimental" },
    { message = "^chore\\(release\\): prepare for", skip = true },
    { message = "^chore\\(deps.*\\)", skip = true },
    { message = "^chore\\(pr\\)", skip = true },
    { message = "^chore\\(pull\\)", skip = true },
    { message = "(?i)checkpoint", skip = true },
    { message = "^ci|^repo", group = "<!-- 8 -->‚öôÔ∏è Repository" },
    { body = ".*security", group = "<!-- 9 -->üõ°Ô∏è Security" },
    { message = "^revert", group = "<!-- 10 -->‚óÄÔ∏è Revert" },
    # { message = ".*", group = "<!-- 11 -->üíº Other" },
]
# Exclude commits that are not matched by any commit parser.
filter_commits = true
# Regex to select git tags that represent releases.
tag_pattern = "v[0-9].*"
# Regex to select git tags that do not represent proper releases.
# Takes precedence over `tag_pattern`.
# Changes belonging to these releases will be included in the next release.
skip_tags = "beta|alpha"

# Regex to exclude git tags after applying the tag_pattern.
# ignore_tags = []
# Order releases topologically instead of chronologically.
topo_order = true
# Order of commits in each group/release within the changelog.
# Allowed values: newest, oldest
sort_commits = "newest"
