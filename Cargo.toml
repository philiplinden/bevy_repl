[package]
name = "bevy_repl"
version = "0.1.0"
edition = "2024"
description = "Add a REPL to headless Bevy applications"
license = "MIT"
repository = "https://github.com/philiplinden/bevy_repl"
keywords = ["bevy", "repl", "console", "debugging"]
categories = ["game-development", "development-tools"]

[dependencies]
bevy = { version = "0.16.1", default-features = false, features = ["bevy_log"]}
clap = { version = "4.5" }
rustyline = { version = "16.0"  }

# Set max log levels. This helps avoid unwanted low-severity log spam, which can affect performance.
log = { version = "0.4", features = [
    "max_level_debug",
    "release_max_level_warn",
] }
tracing = { version = "0.1", features = [
    "max_level_debug",
    "release_max_level_warn",
] }

[features]
default = [
    "dev",
]
dev = ["bevy/dynamic_linking"]
diagnostics = [
    "bevy/bevy_dev_tools",
    "bevy/sysinfo_plugin",
]
custom-history-file = ["rustyline/with-file-history"]

[[example]]
name = "minimal"
path = "examples/minimal.rs"

[[example]]
name = "complete"
path = "examples/complete.rs"

[[example]]
name = "derive"
path = "examples/derive.rs"
features = ["derive"]


# Idiomatic Bevy code often triggers these lints, and the CI workflow treats them as errors.
# In some cases they may still signal poor code quality however, so consider commenting out these lines.
[lints.clippy]
# Bevy supplies arguments to systems via dependency injection, so it's natural for systems to
# request more than 7 arguments -- which triggers this lint.
too_many_arguments = "allow"
# Queries that access many components may trigger this lint.
type_complexity = "allow"

# Enable a small amount of optimization in the dev profile.
[profile.dev]
opt-level = 1

# Enable a large amount of optimization in the dev profile for dependencies.
[profile.dev.package."*"]
opt-level = 3

# Remove expensive debug assertions due to <https://github.com/bevyengine/bevy/issues/14291>
[profile.dev.package.wgpu-types]
debug-assertions = false

[profile.release]
# Compile the entire crate as one unit.
# Slows compile times, marginal improvements.
codegen-units = 1
# Do a second optimization pass over the entire program, including dependencies.
# Slows compile times, marginal improvements.
lto = "thin"
